import os
import asyncio
import logging
import sqlite3
import tempfile
import datetime
import csv

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ------------------ CONFIG ------------------
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or 0)
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
router_export = Router()
# --------------------------------------------


# ------------------ DATABASE ------------------
def init_db():
    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS registrations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        car TEXT,
        phone TEXT,
        lang TEXT,
        people INTEGER,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    conn.close()

# ------------------------------------------------


# ------------------ REGISTRATION ------------------
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é OxusBot!\n\n"
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`–ò–º—è, –ê–≤—Ç–æ–º–æ–±–∏–ª—å, –¢–µ–ª–µ—Ñ–æ–Ω, –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n`Akbar, Jeep Grand, +998901112233, 3`",
        parse_mode="Markdown"
    )

@router.message(F.text.regexp(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+,\s*.+,\s*\+?\d+,\s*\d+$"))
async def register(message: Message):
    try:
        name, car, phone, people = [x.strip() for x in message.text.split(",")]
        people = int(people)
        conn = sqlite3.connect("bot.db")
        cur = conn.cursor()
        cur.execute("INSERT INTO registrations (name, car, phone, lang, people) VALUES (?, ?, ?, ?, ?)",
                    (name, car, phone, "RU", people))
        conn.commit()
        conn.close()

        reg_id = cur.lastrowid
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à ID: {reg_id}\n\n"
                             f"üë§ {name}\nüöô {car}\nüìû {phone}\nüë• –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {people}")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if ADMIN_CHAT_ID:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (ID {reg_id}):\n"
                f"üë§ {name}\nüöô {car}\nüìû {phone}\nüë• –õ—é–¥–µ–π: {people}"
            )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        print(e)
# ------------------------------------------------


# ------------------ EXPORT TO CSV ------------------
def _detect_people_column(cur) -> str | None:
    candidates = {"people", "persons", "count", "qty", "passengers", "num_people"}
    cur.execute("PRAGMA table_info(registrations)")
    cols = {row[1].lower() for row in cur.fetchall()}
    for c in candidates:
        if c in cols:
            return c
    return None

@router_export.message(Command("export"))
async def export_csv(message: Message):
    if not ADMIN_CHAT_ID or message.from_user.id != ADMIN_CHAT_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    conn = sqlite3.connect("bot.db")
    cur = conn.cursor()
    people_col = _detect_people_column(cur)

    if people_col:
        cur.execute(f"SELECT id, name, car, phone, lang, {people_col} AS people, created_at FROM registrations ORDER BY id DESC")
        headers = ["id", "name", "car", "phone", "lang", "people", "created_at"]
        rows = cur.fetchall()
    else:
        cur.execute("SELECT id, name, car, phone, lang, created_at FROM registrations ORDER BY id DESC")
        headers = ["id", "name", "car", "phone", "lang", "people", "created_at"]
        rows_raw = cur.fetchall()
        rows = [(r[0], r[1], r[2], r[3], r[4], 1, r[5]) for r in rows_raw]

    conn.close()

    if not rows:
        return await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")

    total_people = sum(int(r[5] or 0) for r in rows)
    total_reg = len(rows)

    with tempfile.NamedTemporaryFile("w", newline="", suffix=".csv", delete=False) as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(rows)
        writer.writerow([])
        writer.writerow(["–ò–¢–û–ì–û", "", "", "", "", "–í—Å–µ–≥–æ –ª—é–¥–µ–π", "–ó–∞—è–≤–æ–∫"])
        writer.writerow(["", "", "", "", "", total_people, total_reg])
        tmp_path = f.name

    ts = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    await message.answer_document(
        FSInputFile(tmp_path, filename=f"registrations_{ts}.csv"),
        caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_reg}\n–í—Å–µ–≥–æ –ª—é–¥–µ–π: {total_people}"
    )
# ------------------------------------------------


# ------------------ MAIN ------------------
async def main():
    logging.basicConfig(level=logging.INFO)
    init_db()
    dp.include_router(router)
    dp.include_router(router_export)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
# ------------------------------------------------
